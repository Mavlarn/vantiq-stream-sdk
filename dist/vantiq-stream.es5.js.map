{"version":3,"file":"vantiq-stream.es5.js","sources":["../src/vantiq-session.ts","../src/vantiq-sock.ts","../src/vantiq-api.ts","../src/vantiq-stream.ts"],"sourcesContent":["import axios, { AxiosPromise, AxiosResponse, AxiosInstance } from 'axios';\n\nimport { VantiqSubscriber } from './vantiq-sock'\n\nconst DEFAULT_API_VERSION = 1;\n\n/**\n * Vantiq server options to create a new session.\n */\nexport interface VantiqOptions {\n  server: string,\n  apiVersion: number,\n  accessToken: string\n}\n\n/**\n * Http session for vantiq Rest API. Using axios to request to vantiq server.\n * This will be used by [[VantiqAPI]] and [[VantiqStream]]\n */\nexport class VantiqSession {\n\n  private server: string;\n  private apiVersion: number;\n  private authenticated: boolean = false;\n\n  private _accessToken: string | null;\n  private _tokenHeader: string;\n  private subscriber: VantiqSubscriber | null;\n\n  private _axios: AxiosInstance;\n\n  public constructor(opts: VantiqOptions) {\n    this.server        = opts.server;\n    this.apiVersion    = 1;\n\n    if(opts.apiVersion) {\n        this.apiVersion = opts.apiVersion;\n    } else {\n      this.apiVersion = DEFAULT_API_VERSION;\n    }\n    if (!opts.accessToken) {\n      throw new Error(\"Not authentication token!\");\n    }\n    this._accessToken = opts.accessToken;\n    this._tokenHeader = 'Bearer ' + this._accessToken;\n    // Vantiq Subscriber used to listen to events\n    this.subscriber = null;\n\n    this._axios = axios.create({\n      baseURL: this.server,\n      timeout: 30000,\n      headers: {'Authorization': this._tokenHeader}\n    });\n  }\n\n  public isAuthenticated () {\n    return this.authenticated;\n  }\n\n  public getServer() {\n    return this.server;\n  }\n\n  public getApiVersion() {\n    return this.apiVersion;\n  }\n\n  public authenticate (username: string, password: string) {\n    var credentials =  { username: username, password: password };\n    this._axios.get(this.fullApiPath('/authenticate'))\n        .then((resp: AxiosResponse) => {\n            //\n            // If access token is available, then we're authenticated\n            //\n            if(resp.status == 200 && resp.data && resp.data.accessToken) {\n                this._accessToken   = resp.data.accessToken;\n                this.authenticated = true;\n                return true;\n            } else {\n                this._accessToken   = null;\n                this.authenticated = false;\n                return false;\n            }\n        });\n  };\n\n  public getAccessToken() {\n    return this._accessToken;\n  }\n\n  public get(path: string): AxiosPromise {\n    return this._axios.get(this.fullApiPath(path));\n  }\n\n  public post(path: string, body: any) {\n    return this._axios.post(this.fullApiPath(path), body);\n  }\n\n  public put(path: string, body: any) {\n    return this._axios.put(this.fullApiPath(path), body);\n  }\n\n  public delete(path: string) {\n    return this._axios.delete(this.fullApiPath(path));\n  }\n\n  /**\n   Issue a query request on a specific resource\n   */\n  select(resource: string, props: any, where: any, sort: any) {\n    var path = this.resourcePath(resource, null);\n    var join = '?';\n    if (props) {\n      path += join + 'props=' + encodeURIComponent(JSON.stringify(props));\n      join = '&';\n    }\n    if (where) {\n      path += join + 'where=' + encodeURIComponent(JSON.stringify(where));\n      join = '&';\n    }\n    if (sort) {\n      path += join + 'sort=' + encodeURIComponent(JSON.stringify(sort));\n    }\n\n    return this.get(path);\n  };\n\n  /**\n   * Build a resource path for a vantiq resource.\n   * @param qualifiedName resource name, like the name of a Type/source/procedure.s\n   * @param id If the resource is a Type, id is the value of '_id' file or the resource\n   */\n  public resourcePath(qualifiedName: string, id: string | null) {\n    let path;\n    if (qualifiedName.startsWith(\"system.\")) {\n      var systemResourceName = qualifiedName.substring(7);\n      path = \"/resources/\" + systemResourceName;\n    }\n    else {\n      path = \"/resources/custom/\" + qualifiedName;\n    }\n    if (id != null) {\n      path += \"/\" + id;\n    }\n    return path;\n  };\n\n  /**\n   * Build a api request path.\n   * @param path the path.\n   */\n  private fullApiPath(path: string): string {\n    if(path.startsWith('/')) {\n        path = path.substring(1);\n    }\n    return '/api/v' + this.apiVersion + '/' + path;\n  }\n}\n","\nimport * as SockJS from 'sockjs-client';\nimport { VantiqOptions } from './vantiq-session';\nimport { connect } from 'tls';\n\n/**\n * Subscriber class used to handle real-time subscription events from a Vantiq server.\n *\n */\nexport class VantiqSubscriber {\n\n  private sockUrl: string;\n  private accessToken: string;\n  private sock: any;\n  private callbacks: Map<string, Function>;\n  private errCallback: Function | null;\n  private wsauthenticated: boolean = false;\n  private connection: Promise<boolean>;\n\n  /**\n   * Create a new vantiq Subscriber using Vantiq sock api.\n   * @param opts Vantiq options.\n   * @param errCb default error callback function.\n   */\n  public constructor(opts: VantiqOptions, errCb: Function) {\n    this.callbacks = new Map<string, Function>();\n    this.errCallback = errCb;\n    this.accessToken = opts.accessToken;\n    this.sockUrl = '';\n\n    this.connection = this.connect(opts);\n  }\n\n  public isConnected() {\n    return this.sock != null;\n  }\n\n  /**\n   * Message handler for subscribed events.\n   * @param m the message.\n   */\n  public handleMessage(m: any) {\n    //\n    // Lookup callback and issue request\n    //\n    var msg = JSON.parse(m);\n    if ((msg.status == 200 || msg.status == 100) && msg.headers) {\n      // for subscription, there will be an header to identify this request\n      var requestId = msg.headers['X-Request-Id'];\n      var callback  = this.callbacks.get(requestId);\n\n      if(callback != null) {\n        // for topics/sources subscription, the new topic/source data will be in msg.body.value.\n        if (requestId.indexOf(\"/topics/\") === 0 || requestId.indexOf(\"/sources/\") === 0) {\n          callback(msg.body.value);\n        } else {\n          callback(msg.body);\n        }\n      }\n    } else if (msg.status == 200) {\n      console.warn('There is no X-Request-Id in response:', msg);\n    } else if (this.errCallback) {\n      this.errCallback(msg);\n    }\n  };\n\n  /**\n   * Connect with vantiq sock api. This will return a promise. All sock api request should be after the\n   * connection finished, using then() of this promise.\n   * @param opts vantiq options.\n   */\n  public connect(opts: VantiqOptions): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n\n        //\n        // WebSocket URL: http[s]://host:port/api/v<apiVersion>/wsock/websocket\n        //\n      this.sockUrl = opts.server.replace('httpXXX', 'ws') + '/api/v' + opts.apiVersion + '/wsock';\n      this.sock = new SockJS(this.sockUrl, null, { server: \"websocket\" });\n\n      this.sock.onopen = () => {\n          // Upon connection, we send an authentication request based on the\n          // provided session access token to create an authenticated WS session.\n          var auth = {\n              op:           'validate',\n              resourceName: 'users',\n              object:       opts.accessToken\n          };\n          this.sock.send(JSON.stringify(auth));\n      };\n\n      this.sock.onmessage = (msg: any) => {\n        //\n        // We don't start handling subscription messages, until\n        // we have established an authenticated WS session\n        //\n        if(this.wsauthenticated) {\n            this.handleMessage(msg.data);\n        } else {\n            var resp = JSON.parse(msg.data);\n            if(resp.status === 200) {\n                this.wsauthenticated = true;\n                resolve(true);\n            } else {\n                throw new Error(\"Error establishing authenticated WebSocket session:\\n\" + JSON.stringify(resp, null, 2));\n            }\n        }\n      };\n      this.sock.onclose = (e: any) => {\n          this.sock = null;\n      };\n\n    });\n  }\n\n  /**\n   * Subscribe for an events.\n   * @param path the path of the subscribed event.\n   * @param cb callback function.\n   */\n  public subscribe(path: string, cb: Function | string): void {\n    const thisRef = this;\n    this.connection.then( (_: any) => {\n      // Register callback based on path\n      if(this.callbacks.get(path) != null) {\n          throw new Error(\"Callback already registered for event: \" + path);\n      } else {\n          this.callbacks.set(path, <Function>cb);\n      }\n\n      // Issue request to create the subscription\n      var msg = {\n        accessToken: thisRef.accessToken,\n        op: 'subscribe',\n        resourceName: 'events',\n        resourceId: path,\n        parameters: {\n            requestId: path\n        }\n      };\n      this.sock.send(JSON.stringify(msg));\n    });\n  }\n\n  /**\n   * Select Types data by sock.\n   * Although we can select data using Rest API, but sock api will not be limited b y CORS, and there\n   *  will be no http connection for every requests. So we can use sock api to select Type data some times.\n   *\n   * @param resourceName type name.\n   * @param parameters parameters for the selection. It should be like:\n   * `{ \"where\": {\"id\":{\"$lt\":\"20\"}, \"name\":{\"$ne\":\"sensor\"}} }`\n   * @param cb callback function for this selection.\n   */\n  public select(resourceName: string, parameters: any, cb: Function): void {\n    const reqId = resourceName + \"_\" + new Date().getTime();\n    const param = { requestId: reqId, ...parameters };\n    const thisRef = this;\n    this.connection.then( (_: any) => {\n      if(this.callbacks.get(reqId) != null) {\n          throw new Error(\"Callback already registered for event: \" + reqId);\n      } else {\n          this.callbacks.set(reqId, cb);\n      }\n      var msg = {\n          accessToken: thisRef.accessToken,\n          op: 'select',\n          resourceName: resourceName,\n          resourceId: null,\n          parameters: param\n      };\n      this.sock.send(JSON.stringify(msg));\n    });\n  }\n\n  /**\n   * CLose sock connection.\n   */\n  public close() {\n    if(this.isConnected()) {\n        this.sock.close();\n    }\n    this.sock = null;\n  }\n}\n\n\n\n\n\n","//\n// Vantiq SDK Class\n//\nimport { VantiqSession, VantiqOptions } from './vantiq-session'\nimport { VantiqSubscriber } from './vantiq-sock'\nimport { AxiosResponse } from 'axios';\n\n/**\n * Vantiq Rest api to interact with Vantiq server.\n */\nexport class VantiqAPI {\n\n  private session: VantiqSession;\n  private subscriber: VantiqSubscriber;\n\n  public constructor (opts: VantiqOptions) {\n    this.session = new VantiqSession(opts);\n    this.subscriber = new VantiqSubscriber(opts, console.log);\n  }\n\n  /**\n   Check if the session is authenticated.\n   */\n  public isAuthenticated() {\n    return this.session.isAuthenticated();\n  }\n\n  /**\n   * Authenticate with username and password.\n   * @param username user name of vantiq\n   * @param password password\n   */\n  public authenticate(username: string, password: string) {\n    return this.session.authenticate(username, password);\n  }\n\n  public getSession() {\n    return this.session;\n  }\n\n  public getSubscriber() {\n    return this.subscriber;\n  }\n\n  /**\n   Issue a query request for a resource, with query properties and sort.\n   */\n  select(resource: string, props: any, where: any, sort: any) {\n    return this.session.select(resource, props, where, sort).then((response) => {\n      return response.data;\n    });\n  };\n\n  /**\n   Issue a query request for a specific resource\n   */\n  selectOne(resource: string, id: string) {\n    var path = this.session.resourcePath(resource, id);\n    return this.session.get(path).then((response) => {\n      return response.data;\n    });\n  };\n\n  /**\n   Issue a query request for a given resource but returns only the count\n   */\n  count(resource: string, where: any) {\n    var path = this.session.resourcePath(resource, null) + '?count=true';\n    if (where) {\n      path += '&where=' + encodeURIComponent(JSON.stringify(where));\n    }\n\n    // Since we are only returning the count, we restrict\n    // the query to just the IDs to minimize the data transmitted.\n    path += '&props=' + encodeURIComponent(JSON.stringify(['_id']));\n\n    return this.session.get(path)\n      .then((result: AxiosResponse) => {\n        return result.data.length;\n      });\n  };\n\n  /**\n   Insert a new resource record\n   */\n  insert(resource: string, object: object) {\n    var path = this.session.resourcePath(resource, null);\n    return this.session.post(path, object)\n      .then(this.processResult);\n  };\n\n  /**\n   Update a resource that exists in the system\n   */\n  update(resource: string, id: string, object: object) {\n    var path = this.session.resourcePath(resource, id);\n    return this.session.put(path, object)\n      .then(this.processResult);\n  };\n\n  /**\n   Upsert a resource.  If the resource already exists (as\n   defined by a natural key), then update it.  Otherwise,\n   insert a new record.\n   */\n  upsert(resource: string, object: any) {\n    var path = this.session.resourcePath(resource, null) + \"?upsert=true\";\n\n    // Due to MongoDB issue, if the \"_id\" is present, then MongoDB\n    // thinks the _id is being changed.  As such, we remove the\n    // \"_id\" field if found.  This works if the resource has a natural\n    // key defined.  If not, then likely updates are not desired.  If\n    // an update is really desired, then the 'update' method should\n    // be used.\n    delete object._id;\n\n    return this.session.post(path, object)\n      .then(this.processResult);\n  };\n\n  private processResult(response: AxiosResponse) {\n    if (Array.isArray(response.data)) {\n      if (response.data.length == 0) {\n        return null;\n      } else {\n        return response.data[0];\n      }\n    } else {\n      return response.data;\n    }\n  }\n\n  /**\n   Deletes a number of resource records that match the given where clause.\n   */\n  delete(resource: string, where: any) {\n    var path = this.session.resourcePath(resource, null) + \"?count=true&where=\" + encodeURIComponent(JSON.stringify(where));\n    return this.session.delete(path)\n      .then((result) => {\n        return (result.status == 204);\n      });\n  };\n\n  /**\n   Deletes a single resource record.\n   */\n  deleteOne(resource: string, id: string) {\n    var path = this.session.resourcePath(resource, id);\n    return this.session.delete(path)\n      .then((result) => {\n        return (result.status == 204);\n      });\n  };\n\n  /**\n   Publish onto a topic or a source\n   */\n  public publish(resource: string, id: string, payload: any) {\n\n    // Only sources and topics support the publish operation\n    if (resource != 'sources' && resource != 'topics') {\n      return Promise.reject(new Error('Only \"sources\" and \"topics\" support publish'));\n    }\n\n    var path = '/resources/' + resource + '/' + id;\n    return this.session.post(path, payload)\n      .then((result) => {\n        return (result.status == 200);\n      })\n      .catch((err) => {\n        if (err.statusCode == 404 && resource == 'topics' && !id.startsWith('/')) {\n          throw new Error(\"Illegal topic name.  Topic names must begin with a slash '/'.\");\n        } else {\n          throw err;\n        }\n      });\n  };\n\n  /**\n   Execute a specific procedure\n   */\n  public execute(procedure: string, params: any) {\n    var path = '/resources/procedures/' + procedure;\n    return this.session.post(path, params)\n      .then((result) => {\n        return result.data;\n      });\n  };\n\n  /**\n   Evaluate a specific analytics model\n   */\n  public evaluate(modelName: string, params: any) {\n    var path = '/resources/analyticsmodels/' + modelName;\n    return this.session.post(path, params)\n      .then((result) => {\n        return result.data;\n      });\n  };\n\n  /**\n   Query a specific source\n   */\n  public query(source: string, params: any) {\n    var path = '/resources/sources/' + source + '/query';\n    return this.session.post(path, params)\n      .then((result) => {\n        return result.data;\n      });\n  };\n\n  /**\n   Subscribe to a specific event.  The supported event types are:\n   For topics, subscribe events are Simple \"PUBLISH\" events. The Path is the topic (e.g. \"/foo/bar\")\n   For sources, subscribe events are Source events. Path is the source name.\n   For types, subscribe events are changed Data Type events.  Path is the name and operation (e.g. \"/MyType/insert\")\n   */\n  subscribe(resource: string, name: string, operation: string | null, callback: Function | string) {\n    let path;\n    switch (resource) {\n      case 'sources':\n      case 'topics':\n        if (operation != null) {\n          return Promise.reject(new Error('Operation only supported for \"types\"'));\n        }\n        path = '/' + resource + '/' + name;\n        break;\n      case 'types':\n        if (operation == null) {\n          return Promise.reject(new Error('Operation required for \"types\"'));\n        }\n        if (operation !== 'insert' &&\n          operation !== 'update' &&\n          operation !== 'delete') {\n          return Promise.reject(new Error('Operation must be \"insert\", \"update\" or \"delete\"'));\n        }\n        path = '/types/' + name + '/' + operation;\n        break;\n      default:\n        return Promise.reject(new Error('Only \"topics\", \"sources\" and \"types\" support subscribe'));\n    }\n\n    return this.subscriber.subscribe(path, callback);\n  };\n\n  /**\n   * Select data from vantiq using sock api.\n   *\n   * @param resourceName resource name.\n   * @param parameters\n   * @param callback callback function.\n   */\n  selectBySock(resourceName: string, parameters: any, callback: Function) {\n    return this.subscriber.select(resourceName, parameters, callback);\n  };\n\n  /**\n   Unsubscribes to all events.\n   */\n  unsubscribeAll() {\n    this.subscriber.close();\n    delete this.subscriber;\n    console.log(\"this.subscriber\");\n    console.log(this.subscriber);\n  };\n}\n\n/**\n Known Resources\n */\nenum SYSTEM_RESOURCES {\n  'users',\n  'types',\n  'namespaces',\n  'profiles',\n  'scalars',\n  'documents',\n  'sources',\n  'topics',\n  'rules',\n  'nodes',\n  'procedures',\n  'analyticsmodels',\n  'configurations'\n};\n\n","import { VantiqSession, VantiqOptions } from './vantiq-session';\nimport { VantiqAPI } from './vantiq-api';\nimport { VantiqSubscriber } from './vantiq-sock';\nimport { AxiosResponse } from 'axios';\n\nimport { Subscription, Observable, Observer, Subject, interval } from 'rxjs';\n\n// import fromPromise from 'rxjs';\n/**\n * Vantiq stream util class to create a stream like we do in vantiq client builder.\n * Vantiq stream will use Rxjs to create a subscribable object, which will generate a stream-like\n * data.\n */\nexport class VantiqStream {\n\n  private api: VantiqAPI;\n  private session: VantiqSession;\n\n  private streams: Map<String, Observable<any>> = new Map<string, Observable<any>>();\n\n  public constructor(opts: VantiqOptions) {\n    this.api = new VantiqAPI(opts);\n    this.session = this.api.getSession();\n  }\n\n /**\n  * Create a timed query stream. It will be used to get data from a `Type`.\n  * The parameters will be like this:\n    ```\n    {\n      where: {\"id\":{\"$lt\":\"20\"},\"name\":{\"$ne\":\"sensor\"}}\n      limit: 10,\n      sort: {\"name\":1}\n    }\n    ```\n  * The generated url will be like: `https://dev.vantiq.cn/api/v1/resources/custom/Sensor?where=%7B%22id%22%3A%7B%22%24lt%22%3A%2220%22%7D%2C%22name%22%3A%7B%22%24ne%22%3A%22sensor%22%7D%7D&limit=10&sort=%7B%22name%22%3A1%7D`\n  *\n  * @param streamName stream name.\n  * @param typeName name of the type.\n  * @param intervalSec interval times in second.\n  * @param where selection condition to get data.\n  * @param limit result data limit count.\n  * @param sort sort properties to sort during selection and result.\n  * @param onData callback function which will be called when the data is arrived.\n  */\n  public timedQuery(streamName: string, typeName: string, intervalSec: number, where: any, limit: number, sort: any, onData: Function): Observable<any> {\n    const subject = new Subject();\n    const params: any = {};\n    if (where) {\n      params.where = where;\n    }\n    if (limit && limit > 0) {\n      params.limit = limit;\n    }\n    if (sort) {\n      params.sort = sort;\n    }\n    interval(intervalSec * 1000).subscribe((_: any) => {\n      this.api.selectBySock(typeName, params, (data: any) => {\n        subject.next(data);\n        try {\n          onData(data);\n        } catch (e) {\n          subject.error(e);\n        }\n      });\n    })\n    this.streams.set(streamName, subject);\n    return subject;\n  }\n\n  /**\n   * Create a timed query stream, using Rest API.\n   *\n   * @param streamName stream name.\n   * @param typeName name of the type.\n   * @param intervalSec interval times in second.\n   * @param where selection condition to get data.\n   * @param limit result data limit count.\n   * @param sort sort properties to sort during selection and result.\n   * @param onData callback function which will be called when the data is arrived.\n   */\n  public timedQueryWithRest(streamName: string, typeName: string, intervalSec: number, limit: number, where: any, sort: any, onData: Function): Observable<any> {\n    const subject = new Subject();\n    interval(intervalSec * 1000).subscribe((_: any) => {\n      // resource: string, props: any, where: any, sort: any\n      this.api.select(typeName, null, where, sort).then((data: any) => {\n        subject.next(data);\n        try {\n          onData(data);\n        } catch (e) {\n          subject.error(e);\n        }\n      });\n    });\n    this.streams.set(streamName, subject);\n    return subject;\n  }\n\n  /**\n   * Create a data changed stream. It will be used get changed data from a `Type`.\n   *\n   * @param streamName stream name.\n   * @param typeName name of the type.\n   * @param isInsert whether to get inserted data.\n   * @param isUpdate whether to get updated data.\n   * @param isDelete whether to get deleted data.\n   * @param onData callback function which will be called when the data is arrived.\n   */\n  public dataChanged(streamName: string, typeName: string, isInsert: boolean, isUpdate: boolean, isDelete: boolean, onData: Function) {\n    const subject = new Subject();\n\n    const _subscriberOnDate = (data: any) => {\n      subject.next(data);\n      try{\n        onData(data);\n      } catch(e) {\n        subject.error(e);\n      }\n    };\n\n    if (!isInsert && !isUpdate && !isDelete) {\n      throw new Error(\"Error creating stream:\" + streamName);\n    }\n    if (isInsert) {\n      this.api.subscribe(\"types\", typeName, \"insert\", _subscriberOnDate);\n    }\n    if (isUpdate) {\n      this.api.subscribe(\"types\", typeName, \"update\", _subscriberOnDate);\n    }\n    if (isDelete) {\n      this.api.subscribe(\"types\", typeName, \"delete\", _subscriberOnDate);\n    }\n    this.streams.set(streamName, subject);\n    return subject;\n  }\n\n  /**\n   * Create a source event data stream. It will be used to receive s data stream from a Source.\n   * If only the source has a `interval` setting, it will generate a data stream.\n   *\n   * @param streamName stream name.\n   * @param sourceName name of the source.\n   * @param onData callback function which will be called when the data is arrived.\n   */\n  public sourceEvent(streamName: string, sourceName: string, onData: Function): Observable<any> {\n    const subject = new Subject();\n    const _subscriberOnData = (data: any) => {\n      subject.next(data);\n      try{\n        onData(data);\n      } catch(e) {\n        subject.error(e);\n      }\n    };\n\n    this.api.subscribe(\"sources\", sourceName, null, _subscriberOnData);\n    this.streams.set(streamName, subject);\n    return subject;\n  }\n\n  /**\n   * Create a topic event stream. It will be used to get data from a topic.\n   *\n   * @param streamName stream name.\n   * @param topicName name of the topic.\n   * @param onData callback function which will be called when the data is arrived.\n   */\n  public topicEvent(streamName: string, topicName:string, onData: Function) {\n    const subject = new Subject();\n    const _subscriberOnData = (data: any) => {\n      subject.next(data);\n      try{\n        onData(data);\n      } catch(e) {\n        subject.error(e);\n      }\n    };\n\n    this.api.subscribe(\"topics\", topicName, null, _subscriberOnData);\n    this.streams.set(streamName, subject);\n    return subject;\n  }\n\n  /**\n   * Create a client event stream. It can be used in client side to trigger a data in this stream.\n   *\n   * @param streamName stream name.\n   * @param onData callback function which will be called when the data is arrived.\n   */\n  public clientEvent(streamName: string, onData: Function): Observable<any> {\n    const subject = new Subject();\n    subject.subscribe( (data: any) => {\n      try{\n        onData(data);\n      } catch(e) {\n        subject.error(e);\n      }\n    })\n    this.streams.set(streamName, subject);\n    return subject;\n  }\n}\n"],"names":[],"mappings":"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"}